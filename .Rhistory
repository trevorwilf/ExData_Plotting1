?norm
help.search("Norm")
help.search("rNorm")
args("rnorm")
rnorm
head(x)
con <- url("Http://www.jhsph.edu", "r")
x <- readlines(con)
con <- url("Http://www.jhsph.edu", "r")
con <- url("http://www.jhsph.edu", "r")
x <- readlines(con)
x <- readLines(con)
head(x)
lapply
function (X, FUN, ...)
{
FUN <- match.fun(FUN)
if (!is.vector(X) || is.object(X))
X <- as.list(X)
.Internal(lapply(X, FUN))
}
pwd
ls
help.search("slidify")
help.search("kernlab")
help.search("knitr")
help.search("pamr")
clear
echo "hello"
a <- available.packages()
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ggplot2)
install.packages("ggplot1")
install.packages("ggplot2")
library(ggplot2)
version
r_tools
find.packages("devtools")
find.package("devtools")
find.package(devtool)
find.package(devtools)
find.package("devtools")
find.package("devtools0")
find.package("devtool")
find.package("devtool")
find.package("devtools")
find.package
find.package()
find.package("devtools")
find.package("devtools")
find.package()
find.package()
find.package("devtools")
library(devtools)
q()
install.packages("KernSmooth")
library(kernsmooth)
library(KernSmooth)
getwd()
getwd()
q()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv. stringAsFactors = FALSE)
read.csv(path2csv, stringAsFactors = FALSE)
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?seletct
??select
?select
cran
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cra
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, x:ip_id, -(x:size))
select(cran, -(x:size))
select(cran, -x:size)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
?summarize
summarize(by_package, mean(size))
summarize()
submit()
avg_bytes = mean(size))
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
submit()
pack_sum
quantile(pack_sum$count, probs = .99)
?filter
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
?select
cran
select(cran, ip_id, country, package, size)
submit()
reset()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(student2, sex_class, male_1, female_1, -male_1, -femail_1 )
res <- gather(student2, sex_class, male_1, female_1)
res <- gather(student2, sex_class)
res <- gather(student2, grade, sex_class, male_1, female_1, -male_1, -femail_1 )
res <- gather(student2, grade, sex_class = male_1, sex_class=female_1, -male_1, -femail_1 )
res <- gather(student2, sex_class, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
student3
students3
test <- students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
test
test %>% mutate(extract_numeric(class))
test %>% mutate(class, extract_numeric(class))
test %>% mutate(class = extract_numeric(class))
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
passed
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
?separate
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19/20/12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours = 13, minutes = 13, seconds = 55)
this_moment
?now
nyc <- now(tz = "America/New_York")
nyc
dpart <- nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) +minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
pnorm(100, mean = 80, sd = 10)
qnorm(.10, mean = 1100, sd = 75)
qnorm(.10, mean = 1100, sd = (75/sqrt(144))
qnorm(.10, mean = 1100, sd = (75/12))
data(sleep)
g1 <- sleep$extra{1 : 10]
g1 <- sleep$extra[1 : 10]
g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
difference
sd(g1)
sd(g2)
sd(difference)
var(g1)
var(g2)
test <- sd(g2) - sd(g1)
test
test <- sd(g2)/10 - sd(g1)/10
test
e <- rexp(500)
n <- rnorm(500)
qqplot(e, n)
qqplot(n, e)
qe <- qexp(e)
qe <- qexp(500)
?rexp
?qqplot
qqplot(n, e)
qqplot(e, n)
qqplot(n, e)
sqrt(.5*sd(g1) + .5*sd(g2))
g2
temp <- expand.grid(c(1,3), c(1,3), c(1,3))
table(apply(temp, 1, median))
temp <- expand.grid(c(1,3), c(1,3))
table(apply(temp, 1, median))
qqplot(e, n)
# get data set
setwd("C:\\github\\ExData_Plotting1")
# get data set
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", "powerconsumption.zip")
unzip("powerconsumption.zip")
ls
ls()
dir()
powertable <- read.table("household_power_consumption.txt", blank.lines.skip = TRUE)
View(powertable)
powertable <- read.csv("household_power_consumption.txt", header = TRUE)
View(powertable)
?read.table
powertable <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", nna.strings = "?", skipNul = TRUE, blank.lines.skip = TRUE)
powertable <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", skipNul = TRUE, blank.lines.skip = TRUE)
powersubset <- subset(powertable, Date > 01/02/2007 & Date < 02/02/2007)
powertable$Date <- as.Date(powertable$Date, format= "%d/%m/%Y")
powersubset <- subset(powertable, Date > 01/02/2007 & Date < 02/02/2007)
View(powersubset)
?as.data.frame
?as.Date
View(powertable)
powersubset <- subset(powertable, Date > "2007-02-01" & Date < "2007-02-02")
powertable <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", skipNul = TRUE, blank.lines.skip = TRUE)
powertable$Date <- as.Date(powertable$Date, format= "%d/%m/%Y")
powersubset <- subset(powertable, Date > "2007-02-01" & Date < "2007-02-02")
powertable <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", skipNul = TRUE, blank.lines.skip = TRUE)
powertable$Date <- as.Date(powertable$Date, format= "%d/%m/%Y")
powersubset <- subset(powertable, Date > "2007-02-01" & Date < "2007-02-03")
View(powersubset)
powersubset <- subset(powertable, Date >= "2007-02-01" & Date <= "2007-02-02")
library(ggplot2)
?"ggplot2"
?"ggplot"
?ggplot
ggplot(powersubset$Global_active_power, geom="histogram")
powersubset <- as.data.frame(subset(powertable, Date >= "2007-02-01" & Date <= "2007-02-02"))
ggplot(powersubset$Global_active_power, geom="histogram")
class(powersubset)
hist(powersubset$Global_active_power)
hist(powersubset$Global_active_power, col = red, xlab = "Global Active Power (kilowatts)")
hist(powersubset$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)")
hist(powersubset$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white",  res = NA, ...,
type = c("cairo", "cairo-png", "Xlib", "quartz"), antialias)
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
antialias)
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12,
antialias)
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12)
?plot
plot(powersubset$Global_active_power, powersubset$Date)
plot(x = powersubset$Global_active_power, y = powersubset$Date,
type = "l")
plot(x = powersubset$Global_active_power, y = powersubset$Date,
type = "l")
?"plot"
plot(x = powersubset$Global_active_power,
type = "l")
View(powersubset)
plot(x = powersubset$Global_active_power, y = powersubset$Time,
type = "l")
library(dplyr)
setwd("C:\\github\\ExData_Plotting1")
?"dplyr"
powertable$Time <- as.Date(powertable$Time, format= "%H:%M:%S")
powertable <- mutate(powertable, DateTime = as.POSIXct(paste(powertable$Date, powertable$Time), format="%Y-%m-%d %H:%M:%S"))
View(powertable)
View(powertable)
powertable <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", skipNul = TRUE, blank.lines.skip = TRUE)
powertable <- mutate(powertable, DateTime = as.POSIXct(paste(powertable$Date, powertable$Time), format="%d/%m/%Y %H:%M:%S"))
powertable$Date <- as.Date(powertable$Date, format= "%d/%m/%Y")
powertable$Time <- as.Date(powertable$Time, format= "%H:%M:%S")
powersubset <- as.data.frame(subset(powertable, Date >= "2007-02-01" & Date <= "2007-02-02"))
View(powersubset)
plot(x = powersubset$Global_active_power, y = powersubset$DateTime,
type = "l")
library(dplyr)
library(ggplot2)
ggplot(data=powersubset, aes(x=powersubset$DateTime, y=powersubset$Global_active_power, group=1)) +
geom_line()
?"ggplot"
library(dplyr)
library(ggplot2)
setwd("C:\\github\\ExData_Plotting1")
# get data set
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", "powerconsumption.zip")
unzip("powerconsumption.zip")
powertable <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", skipNul = TRUE, blank.lines.skip = TRUE)
powertable <- mutate(powertable, DateTime = as.POSIXct(paste(powertable$Date, powertable$Time), format="%d/%m/%Y %H:%M:%S"))
powertable$Date <- as.Date(powertable$Date, format= "%d/%m/%Y")
powertable$Time <- as.Date(powertable$Time, format= "%H:%M:%S")
powersubset <- as.data.frame(subset(powertable, Date >= "2007-02-01" & Date <= "2007-02-02"))
ggplot(data=powersubset, aes(x=powersubset$DateTime, y=powersubset$Global_active_power, group=1)) +
geom_line()
ggplot(powersubset, aes(x=powersubset$DateTime, y=powersubset$Global_active_power, group=1)) +
geom_line()
plot(x = powersubset$Global_active_power, y = powersubset$DateTime)
plot(x = powersubset$Global_active_power, y = powersubset$DateTime)
hist(powersubset$Global_active_power)
